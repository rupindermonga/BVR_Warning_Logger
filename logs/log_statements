            self.logger = logging.getLogger('BVRScoring')
            self.logger.setLevel(log_level)
            self.logger.addHandler(fh)
            self.logger.info('Logger ready')
            self.logger.info('Feature map setup done')
            self.logger.info('Vector similarity module setup done')
            self.logger.info('Sentiment module setup done')
        self.logger.info('Introduction key default setup done')
            self.logger.info('{:9s}  {:35s}  {}'.format('Progress:' if first else '',
                    self.logger.warning('Cannot parse rating "{}", assuming 2.5'.format(rating))
            self.logger.warning('Cannot parse total ratings "{}", assuming 1'.format(totalRatings))
        self.logger.info('Scoring review: "{}","{}","{}"."{}"'.format(review['reviewerName'],\
            self.logger.warning('Cannot parse review date "{}", ignoring this review'.format(review['reviewDate']))
            self.logger.info('Review ignored since weight ({}) < threshold ({})'.format(weight,float(self.config['Process']['review_weight_threshold'])))
            self.logger.info('Review not found in snapshot, creating a new snapshot')
        self.logger.info('Found significant_mentions: {}'.format(', '.join(['{}:{}'.format(s,len(snapshot['significant_mentions'][s])) \
        self.logger.info('Found significant_sentences: {}'.format(', '.join(['{}:{}'.format(s,len(snapshot['significant_sentences'][s])) \
            self.logger.info('Found feature_mentions: {}: {}'.format(s,', '.join(['{}:{}'.format(f,snapshot['feature_mentions'][s][f]) \
                self.logger.info('Processed {} (out of {}) reviews for product "{}"'.format(count,len(reviews),asin))
        self.logger.info('Processed {} reviews for product "{}"'.format(count,asin))
                self.logger.warning('Key "{}" missing for product "{}"'.format(key,asin))
        self.logger.info('Scoring product: "{}","{}"'.format(bvr_category,asin))
            self.logger.warning('Reviews missing for product "{}" -- skipping this product'.format(asin))
        self.logger.info('Scoring category: "{}"'.format(bvr_category))
                self.logger.warning('Product "{}" missing from raw data'.format(asin))
                self.logger.warning('Scoring failed for product "{}"'.format(asin))
                self.logger.warning('Downloading raw data failed for product "{}"'.format(product['asin']))
                self.logger.info('Did not pull snapshots for category "{}" (reset_snapshot = TRUE)'.format(category_data['title']))
                    self.logger.warning('Downloading snapshot data failed for product "{}"'.format(product['asin']))
        self.logger.info('Pulled data for category "{}"'.format(category_data['title']))
        self.logger.info('Loaded raw and snapshot for category "{}"'.format(category_data['title']))
        self.logger.info('Raw and snapshot data check --- NOT YET IMPLEMENTED --- for category "{}"'.format(category_data['title']))
        # self.logger.info('Raw and snapshot data check done for category "{}"'.format(category_data['title']))
        self.logger.info('Scoring done for category "{}"'.format(category_data['title']))
                self.logger.warning('Uploading snapshot data failed for product "{}"'.format(asin))
                self.logger.warning('Uploading output data failed for product "{}"'.format(asin))
            self.logger.warning('Uploading summary data failed for category "{}"'.format(category_data['title']))
        self.logger.info('Pushed data for category "{}"'.format(category_data['title']))
        self.logger.info('Deleted data for category "{}"'.format(category_data['title']))
        self.logger.info('Dumped specs snapshot data for category "{}"'.format(category_data['title']))
        self.logger.info('Processed category "{}"'.format(category_data['title']))
            self.logger.info('Done process mode={}'.format(mode))
            self.logger.info('Done process mode={} idx={} task={}'.format(mode,
